tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/develop/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    jqueuer-rabbit:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: rabbitmq:3.7
        env:
          - name: RABBITMQ_DEFAULT_USER
            value: admin
          - name: RABBITMQ_DEFAULT_PASS
            value: mypass
        ports:
        - port: 5672
      requirements:
      - host: jq-server

    jqueuer-redis:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: redis:alpine3.10
        command:
        - redis-server
        args:
        - --requirepass mypass
        ports:
        - port: 6379
      requirements:
      - host: jq-server

    jqueuer-manager:
      type: tosca.nodes.MiCADO.Container.Application.Docker.Deployment
      properties:
        image: uowcpc/jqueuer-manager:latest
        ports:
        - containerPort: 9081
        - port: 8081
          nodePort: 30888
      requirements:
      - host: jq-server
      - volume: docker-socket-host-vol

    jqueuer-agent:
      type: tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet
      properties:
        image: uowcpc/jqueuer-agent:latest
        env:
        - name: JQUEUER_MANAGER_SERVICE_NAME
          value: "jqueuer-manager"
        - name: JQUEUER_MANAGER_SERVICE_PORT
          value: "8081"
        - name: JQUEUER_JOB_MAX_RETRIES
          value: "3"
        - name: JQUEUER_HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
      requirements:
        - host: worker-node
        - volume: docker-binary-host-vol
        - volume: docker-socket-host-vol

    docker-binary-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /usr/bin/docker

    docker-socket-host-vol:
      type: tosca.nodes.MiCADO.Container.Volume.HostPath
      properties:
        path: /var/run/docker.sock
###
### The container image below might need to be changed depending on your experimentation tool
###
    worker:
      type: tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet
      properties:
        image: osabuoun/repast
        tty: true
      requirements:
        - host: worker-node
###
### The worker node is directly below, change resources if necessary
###
    worker-node:
      type: tosca.nodes.MiCADO.EC2.Compute
      properties:
        region_name: [ REGION NAME ]
        image_id: [ IMAGE ID ]
        instance_type: [ INSTANCE TYPE]
        security_group_ids:
          - [ SEC GROUP HERE ]
        key_name: [ KEY HERE ]
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: ec2
              endpoint_cloud: https://ec2.eu-west-2.amazonaws.com

    jq-server:
      type: tosca.nodes.MiCADO.EC2.Compute
      properties:
        region_name: [ REGION NAME ] 
        image_id: [ IMAGE ID ]
        instance_type: [ INSTANCE TYPE ]
        security_group_ids:
          - [ SEC GROUP HERE ]
        key_name: [KEY NAME ]
        context:
          append: true
          cloud_config: |
            runcmd:
            - echo never > /sys/kernel/mm/transparent_hugepage/enabled
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: ec2
              endpoint_cloud: https://ec2.eu-west-2.amazonaws.com 

###
### The policies are below
###
  policies:
    - monitoring:
        type: tosca.policies.Monitoring.MiCADO
        properties:
          enable_container_metrics: false
          enable_node_metrics: false
    - scalability:
        type: tosca.policies.Scaling.MiCADO
        targets: [ worker-node ]
        properties:
          sources:
          - 'jqueuer-manager:9081'
          constants:
            MAXNODES: 30
            EXPERIMENT_ID: exp_123456789_123
          queries:
                  #AET: "jqueuer_single_task_duration{experiment_id='{{EXPERIMENT_ID}}'}"
            EXPDELETED: "count(jqueuer_is_exp_deleted{experiment_id='{{EXPERIMENT_ID}}'}) or vector(0)"
            REMAININGTIME: "jqueuer_experiment_deadline{experiment_id='{{EXPERIMENT_ID}}'}-time()"
            JOBSFAIL: "count(jqueuer_job_failed{experiment_id='{{EXPERIMENT_ID}}'}) or vector(0)"
            TOTALJOBS: "count(jqueuer_job_added{experiment_id='{{EXPERIMENT_ID}}'})"
            COMPLETED: "count(jqueuer_job_accomplished{experiment_id='{{EXPERIMENT_ID}}'} == 1) or vector(0)"
            #CALC_AET: "AVG(jqueuer_job_accomplished_duration{experiment_id='{{EXPERIMENT_ID}}'})"
            AET: "AVG(jqueuer_job_accomplished_duration{experiment_id='{{EXPERIMENT_ID}}'}) or jqueuer_single_task_duration{experiment_id='{{EXPERIMENT_ID}}'}"
            IDLENODES: ["jqueuer_idle_nodes{experiment_id='{{EXPERIMENT_ID}}'}",'node_id']
          min_instances: 1
          max_instances: 30
          scaling_rule: |
            init_m_node_count = m_node_count
            ITEMS = TOTALJOBS - (COMPLETED + JOBSFAIL)
            if ITEMS>0 and EXPDELETED == 0:
              reqnodes = ceil(AET/((REMAININGTIME-AET*0.20)/ITEMS))
              if reqnodes<=0 or reqnodes>ITEMS:
                reqnodes = ITEMS
              if reqnodes>m_node_count:
                m_node_count = reqnodes
              elif reqnodes<m_node_count-1 and REMAININGTIME>AET*2 and m_time_since_node_count_changed>60:
                m_node_count-=1
            else:
              m_node_count = 0
            # Inform jqueuer-manager and push specific nodes in case of scale-down
            if m_node_count > 0:
              if m_userdata is None:
                m_userdata=[]
              if m_node_count != len(m_nodes):
                param_data = '{"event_type": "nodes_required", "num_nodes":' + str(m_node_count) + '}'
                requests.post(url = "http://jqueuer-manager.default.svc.cluster.local:8081/experiment/inform", data = param_data)
              m_nodes_todrop=[]
              if IDLENODES is not None:
                print ("IdleNodes:" + str(IDLENODES))
                # Select VMs not yet dropped before
                if not isinstance(IDLENODES,list):
                  IDLENODES = [IDLENODES]
                for anode in IDLENODES:
                  if str(anode) == "99":
                    continue
                  node_found = False
                  for node in m_nodes:
                    if node['Addr'] == add:
                      node_found = True
                      break
                  if anode not in m_userdata or node_found == True:
                    m_userdata.append(anode)
                    m_nodes_todrop.append(anode)
                print ("NODES TO DROP:   "+ str(m_nodes_todrop))
                print ("m_node_count:   " + str(m_node_count))
                print ("len(m_nodes):  " + str(len(m_nodes)))
              if m_node_count <= init_m_node_count and len(m_nodes_todrop) == 0:
                m_node_count = init_m_node_count
                print ("if m_node_count:   " + str(m_node_count))
